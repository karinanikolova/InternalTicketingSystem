// <auto-generated />
using System;
using ITS.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITS.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250602100834_EmployeeRoleSeed")]
    partial class EmployeeRoleSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("912a7db8-3432-4d23-a135-f0f0bd75eda0"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("af33fb95-252c-4d75-8822-90dda032d0ce"),
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e587c66-2893-46b4-a1e3-dc4e109c8bdf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ca977e4-db86-42f2-b881-8ebaa958a22b",
                            DepartmentId = new Guid("d43760a0-ed19-4c32-a889-5836e7d21609"),
                            Email = "samj@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Samuel",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMJ@MAIL.COM",
                            NormalizedUserName = "SAMJ",
                            PasswordHash = "AQAAAAIAAYagAAAAEAjhtt7/j1C4DqwnSVLPTGzo3I2jkjWXXp5iqCsUjUx7ug7mZeneIEe+SaNWp4N9VQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SamJ"
                        },
                        new
                        {
                            Id = new Guid("2fe45266-224f-4b65-86e8-6622b85911e3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c57b6456-d20f-47ac-bc6e-881eb13e8440",
                            DepartmentId = new Guid("3d90f217-af56-4d20-8e7a-c9629b37c878"),
                            Email = "mlevin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mark",
                            LastName = "Levin",
                            LockoutEnabled = false,
                            NormalizedEmail = "MLEVIN@MAIL.COM",
                            NormalizedUserName = "MLEVIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFcrtHP3EGZlKn+eSMK0Rg0Hs8zTGax2o5iGTQsWHSCwqeHMWQfVx1tEDMVeNo6mVA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MLevin"
                        },
                        new
                        {
                            Id = new Guid("9bbebed4-07e9-47bc-a6c7-95faed3ec874"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31a738e3-1f86-4628-9161-d75ec24b8aaf",
                            DepartmentId = new Guid("cf9a3046-af6d-4874-91ef-efb436aa06a4"),
                            Email = "maryc@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mary",
                            LastName = "Cooper",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARYC@MAIL.COM",
                            NormalizedUserName = "MARYC",
                            PasswordHash = "AQAAAAIAAYagAAAAENvFTDsYJObqCK4bhx2n3F0HirQ+y+C++zFqIuPnNReNFF+iMxVlt8hbeNpeleHCxw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MaryC"
                        },
                        new
                        {
                            Id = new Guid("4087710f-eed3-450a-b563-1e4d28d7d170"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "268ec38a-8453-43a1-ad82-d3b4422e49e6",
                            DepartmentId = new Guid("0c351ab8-4e95-419e-9072-33a9b1f3b544"),
                            Email = "darcya@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Darcy",
                            LastName = "Abrams",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARCYA@MAIL.COM",
                            NormalizedUserName = "DARCYA",
                            PasswordHash = "AQAAAAIAAYagAAAAELijkJCKQM27f8eR74+hbELaQIlWHN6uiQtvBXR/fCs+Kp/cRwl09rS3S9NQkmEc/w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "DarcyA"
                        },
                        new
                        {
                            Id = new Guid("2f799af8-c4b1-4218-bbae-aa08d63d4b89"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1916fbfe-7e88-4aa6-8a26-a12d4b9fb07b",
                            DepartmentId = new Guid("0c351ab8-4e95-419e-9072-33a9b1f3b544"),
                            Email = "sandyb@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Sandy",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "SANDYB@MAIL.COM",
                            NormalizedUserName = "SANDYB",
                            PasswordHash = "AQAAAAIAAYagAAAAED38yagkH8mXcG+bJ0d8a2z9/KBCt0RBjJwYL7F6US1CUqwA6MQe1GDpYjI0Fex43Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SandyB"
                        },
                        new
                        {
                            Id = new Guid("0fc59888-843b-439a-a44e-aaebfdff5c6e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4f53aa8-cede-4fcb-b468-1d3d73c9b6b9",
                            DepartmentId = new Guid("f5670143-f71e-4822-9a13-2e9b4c8a59a3"),
                            Email = "stanleym@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Stanley",
                            LastName = "Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANLEYM@MAIL.COM",
                            NormalizedUserName = "STANM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB3vGEBhXvQAh57U1vGET+Mjry1+bWjy4taip5Vbkw8fjNUOoY/gkUDWyHXrLyfGNw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "StanM"
                        },
                        new
                        {
                            Id = new Guid("5625e59c-9619-4bbd-87b6-db41cb4eaae0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad724dd2-c6e2-44d4-bd58-33ac62a8100a",
                            DepartmentId = new Guid("cf9a3046-af6d-4874-91ef-efb436aa06a4"),
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Garry",
                            LastName = "Francis",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAENk/6X1WFu7HGCt/EB6vq6whaeQz9jYOqWywhnBEm58ASVEXOlZUOlkNZ2+kyVDZxw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "AdminUser"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba917995-a14b-42ac-be6b-b9e9457a63d2"),
                            Name = "Hardware"
                        },
                        new
                        {
                            Id = new Guid("8bdcf1fa-cfd6-4be9-bd0d-309a90b318bc"),
                            Name = "Software"
                        },
                        new
                        {
                            Id = new Guid("8fccfe2d-5666-4179-905d-be741c6a82db"),
                            Name = "Network & Access Request"
                        },
                        new
                        {
                            Id = new Guid("3d0cceee-727e-4c22-8b35-2e19692afe14"),
                            Name = "Security"
                        },
                        new
                        {
                            Id = new Guid("ec2ae63e-613e-4201-be3b-d0688a57c5d2"),
                            Name = "Facilities"
                        },
                        new
                        {
                            Id = new Guid("aca05d8b-6d87-44b6-8cc1-7aeb57a95104"),
                            Name = "HR"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Comment identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Comment creation date");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Comment creator identifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Comment description");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket identifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b867d0c1-371d-4392-9f81-9a788d6c8466"),
                            CreatedOn = new DateTime(2025, 5, 29, 10, 8, 32, 164, DateTimeKind.Utc).AddTicks(9425),
                            CreatorId = new Guid("0fc59888-843b-439a-a44e-aaebfdff5c6e"),
                            Message = "Hello Sandy, we have a Honda Civic and a Toyota 4Runner available. Would you need a large luggage space or will you be travelling light?",
                            TicketId = new Guid("4d284d7a-f3bc-441c-b2a3-9161011fed1f")
                        },
                        new
                        {
                            Id = new Guid("ff340ede-5cda-47e6-9cae-0bfbc0f6831d"),
                            CreatedOn = new DateTime(2025, 5, 29, 10, 8, 32, 165, DateTimeKind.Utc).AddTicks(92),
                            CreatorId = new Guid("2f799af8-c4b1-4218-bbae-aa08d63d4b89"),
                            Message = "Hello Stan, we will be travelling with a total of 3 carry-on luggages, as well as one large suitcase.",
                            TicketId = new Guid("4d284d7a-f3bc-441c-b2a3-9161011fed1f")
                        },
                        new
                        {
                            Id = new Guid("a3374df4-3a0b-4499-bcd9-25d3f39b47df"),
                            CreatedOn = new DateTime(2025, 5, 29, 10, 8, 32, 165, DateTimeKind.Utc).AddTicks(96),
                            CreatorId = new Guid("0fc59888-843b-439a-a44e-aaebfdff5c6e"),
                            Message = "Sandy, based on your luggage size I would reccoment you to take the Toyota 4Runner. When are you supposed to leave and return?",
                            TicketId = new Guid("4d284d7a-f3bc-441c-b2a3-9161011fed1f")
                        },
                        new
                        {
                            Id = new Guid("11c9a28b-4f33-4fa0-994f-384f68ef1e40"),
                            CreatedOn = new DateTime(2025, 5, 29, 10, 8, 32, 165, DateTimeKind.Utc).AddTicks(98),
                            CreatorId = new Guid("2f799af8-c4b1-4218-bbae-aa08d63d4b89"),
                            Message = "Stan, we will be leaving in two days and we are supposed to return in a day or so.",
                            TicketId = new Guid("4d284d7a-f3bc-441c-b2a3-9161011fed1f")
                        },
                        new
                        {
                            Id = new Guid("09f55fdb-2415-4c13-9eb7-b7c5f0b0da56"),
                            CreatedOn = new DateTime(2025, 5, 29, 10, 8, 32, 165, DateTimeKind.Utc).AddTicks(105),
                            CreatorId = new Guid("0fc59888-843b-439a-a44e-aaebfdff5c6e"),
                            Message = "Okay, Sandy, I will contact you as soon as the car is ready. Will you be needing further instructions for operating the vehicle?",
                            TicketId = new Guid("4d284d7a-f3bc-441c-b2a3-9161011fed1f")
                        },
                        new
                        {
                            Id = new Guid("9b794843-3189-4e19-bf19-39f4bea1b178"),
                            CreatedOn = new DateTime(2025, 5, 29, 10, 8, 32, 165, DateTimeKind.Utc).AddTicks(110),
                            CreatorId = new Guid("2f799af8-c4b1-4218-bbae-aa08d63d4b89"),
                            Message = "No, thank you, I have already driven this particular car. Have a great day!",
                            TicketId = new Guid("4d284d7a-f3bc-441c-b2a3-9161011fed1f")
                        },
                        new
                        {
                            Id = new Guid("b527af42-fdf4-4d71-b07a-8c4e7b079721"),
                            CreatedOn = new DateTime(2025, 5, 29, 10, 8, 32, 165, DateTimeKind.Utc).AddTicks(112),
                            CreatorId = new Guid("0fc59888-843b-439a-a44e-aaebfdff5c6e"),
                            Message = "You're welcome. Don't hesitate to contact me if you have any questions or need more assistance. Good day to you, too!",
                            TicketId = new Guid("4d284d7a-f3bc-441c-b2a3-9161011fed1f")
                        },
                        new
                        {
                            Id = new Guid("39cd734b-a39c-4a84-946a-be39f59b33b9"),
                            CreatedOn = new DateTime(2025, 5, 19, 10, 8, 32, 165, DateTimeKind.Utc).AddTicks(114),
                            CreatorId = new Guid("4087710f-eed3-450a-b563-1e4d28d7d170"),
                            Message = "Hello Mary, I have just received your request. I will be contacting you shortly.",
                            TicketId = new Guid("f6e3699f-ab52-4771-a6f4-b715819bb289")
                        },
                        new
                        {
                            Id = new Guid("287fff3c-353c-4edd-bd68-c92aa18895b7"),
                            CreatedOn = new DateTime(2025, 5, 19, 10, 8, 32, 165, DateTimeKind.Utc).AddTicks(116),
                            CreatorId = new Guid("9bbebed4-07e9-47bc-a6c7-95faed3ec874"),
                            Message = "Hello Darcy, thank you for your prompt response. I will be waiting for your contact.",
                            TicketId = new Guid("f6e3699f-ab52-4771-a6f4-b715819bb289")
                        },
                        new
                        {
                            Id = new Guid("216f1e0a-85f7-4cae-ac56-a026d683ce7f"),
                            CreatedOn = new DateTime(2025, 6, 2, 10, 8, 32, 165, DateTimeKind.Utc).AddTicks(118),
                            CreatorId = new Guid("9bbebed4-07e9-47bc-a6c7-95faed3ec874"),
                            Message = "Hello Sam, please restart your device and wait for further instructions. I will contact you in several minutes.",
                            TicketId = new Guid("8df812b7-f7c7-42cb-879f-229e27e2947b")
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Department name");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d43760a0-ed19-4c32-a889-5836e7d21609"),
                            Name = "Engineering & Development"
                        },
                        new
                        {
                            Id = new Guid("3d90f217-af56-4d20-8e7a-c9629b37c878"),
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            Id = new Guid("cf9a3046-af6d-4874-91ef-efb436aa06a4"),
                            Name = "IT & Security"
                        },
                        new
                        {
                            Id = new Guid("0c351ab8-4e95-419e-9072-33a9b1f3b544"),
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = new Guid("f5670143-f71e-4822-9a13-2e9b4c8a59a3"),
                            Name = "Facilities"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket identifier");

                    b.Property<Guid>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket assigned to user identifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket category identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Ticket creation date");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket creator identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Ticket description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Ticket due date");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasComment("Ticket priority");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Ticket status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Ticket title");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("295a08f7-3b53-4dda-998e-e97fc4a87d85"),
                            AssignedToUserId = new Guid("5625e59c-9619-4bbd-87b6-db41cb4eaae0"),
                            CategoryId = new Guid("ba917995-a14b-42ac-be6b-b9e9457a63d2"),
                            CreatedOn = new DateTime(2025, 6, 2, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(8684),
                            CreatorId = new Guid("7e587c66-2893-46b4-a1e3-dc4e109c8bdf"),
                            Description = "My laptop is not turning on. I need it for work.",
                            DueDate = new DateTime(2025, 6, 3, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(8911),
                            Priority = 2,
                            Status = 0,
                            Title = "Laptop not working"
                        },
                        new
                        {
                            Id = new Guid("a9a75aec-728f-4487-a68d-c8083df9f707"),
                            AssignedToUserId = new Guid("5625e59c-9619-4bbd-87b6-db41cb4eaae0"),
                            CategoryId = new Guid("ba917995-a14b-42ac-be6b-b9e9457a63d2"),
                            CreatedOn = new DateTime(2025, 6, 2, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9746),
                            CreatorId = new Guid("4087710f-eed3-450a-b563-1e4d28d7d170"),
                            Description = "My printer is not working. I have a presentation in 3 days and I need it.",
                            DueDate = new DateTime(2025, 6, 4, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9747),
                            Priority = 1,
                            Status = 0,
                            Title = "Printer not working"
                        },
                        new
                        {
                            Id = new Guid("c5e6ddc7-2c41-4350-8b2a-277a4853c110"),
                            AssignedToUserId = new Guid("5625e59c-9619-4bbd-87b6-db41cb4eaae0"),
                            CategoryId = new Guid("8bdcf1fa-cfd6-4be9-bd0d-309a90b318bc"),
                            CreatedOn = new DateTime(2025, 6, 2, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9755),
                            CreatorId = new Guid("2fe45266-224f-4b65-86e8-6622b85911e3"),
                            Description = "I need to install a new software on my laptop.",
                            Priority = 0,
                            Status = 0,
                            Title = "Software installation"
                        },
                        new
                        {
                            Id = new Guid("5c8c6467-4109-465d-95fa-8715edb04b79"),
                            AssignedToUserId = new Guid("9bbebed4-07e9-47bc-a6c7-95faed3ec874"),
                            CategoryId = new Guid("8fccfe2d-5666-4179-905d-be741c6a82db"),
                            CreatedOn = new DateTime(2025, 6, 2, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9758),
                            CreatorId = new Guid("7e587c66-2893-46b4-a1e3-dc4e109c8bdf"),
                            Description = "I am unable to connect to the network.",
                            Priority = 2,
                            Status = 1,
                            Title = "Network issue"
                        },
                        new
                        {
                            Id = new Guid("8df812b7-f7c7-42cb-879f-229e27e2947b"),
                            AssignedToUserId = new Guid("5625e59c-9619-4bbd-87b6-db41cb4eaae0"),
                            CategoryId = new Guid("8fccfe2d-5666-4179-905d-be741c6a82db"),
                            CreatedOn = new DateTime(2025, 6, 2, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9760),
                            CreatorId = new Guid("7e587c66-2893-46b4-a1e3-dc4e109c8bdf"),
                            Description = "I need access to the new software.",
                            Priority = 1,
                            Status = 0,
                            Title = "Access request"
                        },
                        new
                        {
                            Id = new Guid("14ed201e-03d9-486a-a9e8-447ad05f0230"),
                            AssignedToUserId = new Guid("5625e59c-9619-4bbd-87b6-db41cb4eaae0"),
                            CategoryId = new Guid("3d0cceee-727e-4c22-8b35-2e19692afe14"),
                            CreatedOn = new DateTime(2025, 6, 2, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9765),
                            CreatorId = new Guid("2fe45266-224f-4b65-86e8-6622b85911e3"),
                            Description = "I found a security issue in the system.",
                            Priority = 2,
                            Status = 0,
                            Title = "Security issue"
                        },
                        new
                        {
                            Id = new Guid("57b89f98-e672-4dba-9e85-206d793e80e6"),
                            AssignedToUserId = new Guid("5625e59c-9619-4bbd-87b6-db41cb4eaae0"),
                            CategoryId = new Guid("ec2ae63e-613e-4201-be3b-d0688a57c5d2"),
                            CreatedOn = new DateTime(2025, 5, 30, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9862),
                            CreatorId = new Guid("4087710f-eed3-450a-b563-1e4d28d7d170"),
                            Description = "I need a conference room for a small meeting.",
                            DueDate = new DateTime(2025, 6, 9, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9863),
                            Priority = 1,
                            Status = 0,
                            Title = "Conference room needed"
                        },
                        new
                        {
                            Id = new Guid("f6e3699f-ab52-4771-a6f4-b715819bb289"),
                            AssignedToUserId = new Guid("4087710f-eed3-450a-b563-1e4d28d7d170"),
                            CategoryId = new Guid("aca05d8b-6d87-44b6-8cc1-7aeb57a95104"),
                            CreatedOn = new DateTime(2025, 5, 18, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9866),
                            CreatorId = new Guid("9bbebed4-07e9-47bc-a6c7-95faed3ec874"),
                            Description = "I need HR support for a new employee.",
                            Priority = 1,
                            Status = 3,
                            Title = "HR support needed"
                        },
                        new
                        {
                            Id = new Guid("022988c5-451e-48c4-b925-f6f886d83101"),
                            AssignedToUserId = new Guid("9bbebed4-07e9-47bc-a6c7-95faed3ec874"),
                            CategoryId = new Guid("8bdcf1fa-cfd6-4be9-bd0d-309a90b318bc"),
                            CreatedOn = new DateTime(2025, 5, 23, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9869),
                            CreatorId = new Guid("7e587c66-2893-46b4-a1e3-dc4e109c8bdf"),
                            Description = "I need to update the software on my laptop.",
                            Priority = 0,
                            Status = 3,
                            Title = "Software update"
                        },
                        new
                        {
                            Id = new Guid("4d284d7a-f3bc-441c-b2a3-9161011fed1f"),
                            AssignedToUserId = new Guid("0fc59888-843b-439a-a44e-aaebfdff5c6e"),
                            CategoryId = new Guid("ec2ae63e-613e-4201-be3b-d0688a57c5d2"),
                            CreatedOn = new DateTime(2025, 5, 28, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9884),
                            CreatorId = new Guid("2f799af8-c4b1-4218-bbae-aa08d63d4b89"),
                            Description = "I need a company car for a business trip for 3 people.",
                            DueDate = new DateTime(2025, 5, 30, 10, 8, 32, 163, DateTimeKind.Utc).AddTicks(9884),
                            Priority = 1,
                            Status = 2,
                            Title = "Company car needed"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("9bbebed4-07e9-47bc-a6c7-95faed3ec874")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("0fc59888-843b-439a-a44e-aaebfdff5c6e")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("4087710f-eed3-450a-b563-1e4d28d7d170")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("5625e59c-9619-4bbd-87b6-db41cb4eaae0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5625e59c-9619-4bbd-87b6-db41cb4eaae0"),
                            RoleId = new Guid("912a7db8-3432-4d23-a135-f0f0bd75eda0")
                        },
                        new
                        {
                            UserId = new Guid("7e587c66-2893-46b4-a1e3-dc4e109c8bdf"),
                            RoleId = new Guid("af33fb95-252c-4d75-8822-90dda032d0ce")
                        },
                        new
                        {
                            UserId = new Guid("2fe45266-224f-4b65-86e8-6622b85911e3"),
                            RoleId = new Guid("af33fb95-252c-4d75-8822-90dda032d0ce")
                        },
                        new
                        {
                            UserId = new Guid("9bbebed4-07e9-47bc-a6c7-95faed3ec874"),
                            RoleId = new Guid("af33fb95-252c-4d75-8822-90dda032d0ce")
                        },
                        new
                        {
                            UserId = new Guid("4087710f-eed3-450a-b563-1e4d28d7d170"),
                            RoleId = new Guid("af33fb95-252c-4d75-8822-90dda032d0ce")
                        },
                        new
                        {
                            UserId = new Guid("2f799af8-c4b1-4218-bbae-aa08d63d4b89"),
                            RoleId = new Guid("af33fb95-252c-4d75-8822-90dda032d0ce")
                        },
                        new
                        {
                            UserId = new Guid("0fc59888-843b-439a-a44e-aaebfdff5c6e"),
                            RoleId = new Guid("af33fb95-252c-4d75-8822-90dda032d0ce")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Comment", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.Category", "Category")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
