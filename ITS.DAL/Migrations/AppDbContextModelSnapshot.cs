// <auto-generated />
using System;
using ITS.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITS.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("93565863-5f33-4e14-9f8f-ffa20ec6c4a6"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("20bfdb73-43e9-4442-a293-4774b05b5239"),
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4890fae-6461-4f73-a6a1-8072c74ba24b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "757c19a8-9145-41ef-be46-cc00340fc51e",
                            DepartmentId = new Guid("6fcb7fc7-cac3-43bf-ad1c-67be80208437"),
                            Email = "samj@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Samuel",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMJ@MAIL.COM",
                            NormalizedUserName = "SAMJ",
                            PasswordHash = "AQAAAAIAAYagAAAAEIi/60zvxjbUlXkvDlZKY/4rv/zq84h+5n+09+8ySYTE0cMhy3S0IuRQYB/oj6a41A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SamJ"
                        },
                        new
                        {
                            Id = new Guid("4ce1b44e-b99e-4c98-8948-1643bb09ba35"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51dd2f83-0abb-4133-9061-18a6acd70aa5",
                            DepartmentId = new Guid("b87a947d-8700-4bcd-b674-c459332b0076"),
                            Email = "mlevin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mark",
                            LastName = "Levin",
                            LockoutEnabled = false,
                            NormalizedEmail = "MLEVIN@MAIL.COM",
                            NormalizedUserName = "MLEVIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMe9T8wBoeqHKGyCYN4CgVGgqay2jE0YQNH3gitPfXFs+JslFSd+nCeJWBXDorDhQQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MLevin"
                        },
                        new
                        {
                            Id = new Guid("3bfd7d25-a1e5-4f7e-a3bf-028ac195a51b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eaedf7b9-c3b4-4566-bbf4-981221a97bcd",
                            DepartmentId = new Guid("0cd5a2c3-37dd-4c32-8fe5-94b781728e13"),
                            Email = "maryc@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mary",
                            LastName = "Cooper",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARYC@MAIL.COM",
                            NormalizedUserName = "MARYC",
                            PasswordHash = "AQAAAAIAAYagAAAAELbDAj/F/7Xy+VGw0SkNZifbCkA2ReU5KPQeQiEZDeVKreHQdK0417clsoetIUk7lw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MaryC"
                        },
                        new
                        {
                            Id = new Guid("6a28384f-8f2b-4fc3-843b-fec3b3b75693"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b970f4a5-a560-4d38-b92f-6df23ce2416a",
                            DepartmentId = new Guid("60728fee-1021-44e5-9dde-59d82e334397"),
                            Email = "darcya@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Darcy",
                            LastName = "Abrams",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARCYA@MAIL.COM",
                            NormalizedUserName = "DARCYA",
                            PasswordHash = "AQAAAAIAAYagAAAAED5AaFx8OWMokOQRKwDN4yMwdTxodJ9Is14kf5i+o3VGPK10Uv2lgPY7f7Nj2vLFeQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "DarcyA"
                        },
                        new
                        {
                            Id = new Guid("ed77f9d2-186b-4022-aabf-9788a17f9b1c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a3f3282-8f35-4a7c-9ae6-5a198fbcd39f",
                            DepartmentId = new Guid("60728fee-1021-44e5-9dde-59d82e334397"),
                            Email = "sandyb@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Sandy",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "SANDYB@MAIL.COM",
                            NormalizedUserName = "SANDYB",
                            PasswordHash = "AQAAAAIAAYagAAAAEO3030rTf7OeEiT2q0zAnq0+5zKt/JgXZeFiXDdB+yDGR/7xKWRUh2kbau0C8eg/QA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SandyB"
                        },
                        new
                        {
                            Id = new Guid("d2d36cc2-d7ac-4de5-aba0-6b931d26effb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "accf528b-280c-4a7e-b1d2-9a37f35118c9",
                            DepartmentId = new Guid("12757374-5465-4725-b132-436e31bab030"),
                            Email = "stanleym@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Stanley",
                            LastName = "Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANLEYM@MAIL.COM",
                            NormalizedUserName = "STANM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOtJKxQReoPeag5VrXaeV64cQsMo9IOkk0LWZWizp2zuFUA/xRrh9WOF1Jimu4qxMg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "StanM"
                        },
                        new
                        {
                            Id = new Guid("abf83cdd-fc9b-4d43-bf37-3093c1994edd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7460c0f1-fdcf-4932-8bfa-c46821b6e812",
                            DepartmentId = new Guid("0cd5a2c3-37dd-4c32-8fe5-94b781728e13"),
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Garry",
                            LastName = "Francis",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAENxM9b/voBN3fh9v3l9bHT2BSkZ04U52OVvEK8+sBjPZnrAxCdeEsGeaKdvHErST3g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "AdminUser"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("350d8c0e-136a-4e69-9dd1-0565739107b9"),
                            Name = "Hardware"
                        },
                        new
                        {
                            Id = new Guid("cd6788f9-2738-4795-ae67-21e46d812768"),
                            Name = "Software"
                        },
                        new
                        {
                            Id = new Guid("5639a07f-2dfe-43aa-9092-39d4a31723a4"),
                            Name = "Network & Access Request"
                        },
                        new
                        {
                            Id = new Guid("4c27736d-e075-4e27-9127-46005e712d86"),
                            Name = "Security"
                        },
                        new
                        {
                            Id = new Guid("0e5a49d6-a85e-4360-b108-d87b548b7c29"),
                            Name = "Facilities"
                        },
                        new
                        {
                            Id = new Guid("6054ce04-e0ff-4f37-accb-f6b18760ad49"),
                            Name = "HR"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Comment identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Comment creation date");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Comment creator identifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Comment description");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket identifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4579286d-879b-4f07-9f2d-f623573f7c1d"),
                            CreatedOn = new DateTime(2025, 5, 17, 17, 37, 20, 824, DateTimeKind.Utc).AddTicks(7152),
                            CreatorId = new Guid("d2d36cc2-d7ac-4de5-aba0-6b931d26effb"),
                            Message = "Hello Sandy, we have a Honda Civic and a Toyota 4Runner available. Would you need a large luggage space or will you be travelling light?",
                            TicketId = new Guid("f50a4a3a-2c17-4001-8d61-7c06ce1cea76")
                        },
                        new
                        {
                            Id = new Guid("b3861be2-c37e-494f-95a5-36c22c18acb8"),
                            CreatedOn = new DateTime(2025, 5, 17, 17, 37, 20, 824, DateTimeKind.Utc).AddTicks(7813),
                            CreatorId = new Guid("ed77f9d2-186b-4022-aabf-9788a17f9b1c"),
                            Message = "Hello Stan, we will be travelling with a total of 3 carry-on luggages, as well as one large suitcase.",
                            TicketId = new Guid("f50a4a3a-2c17-4001-8d61-7c06ce1cea76")
                        },
                        new
                        {
                            Id = new Guid("073da5fd-5ef6-4b64-b185-283fb5c15be5"),
                            CreatedOn = new DateTime(2025, 5, 17, 17, 37, 20, 824, DateTimeKind.Utc).AddTicks(7823),
                            CreatorId = new Guid("d2d36cc2-d7ac-4de5-aba0-6b931d26effb"),
                            Message = "Sandy, based on your luggage size I would reccoment you to take the Toyota 4Runner. When are you supposed to leave and return?",
                            TicketId = new Guid("f50a4a3a-2c17-4001-8d61-7c06ce1cea76")
                        },
                        new
                        {
                            Id = new Guid("c135d88b-d73e-4ead-bc7a-b6975afe8b2f"),
                            CreatedOn = new DateTime(2025, 5, 17, 17, 37, 20, 824, DateTimeKind.Utc).AddTicks(7828),
                            CreatorId = new Guid("ed77f9d2-186b-4022-aabf-9788a17f9b1c"),
                            Message = "Stan, we will be leaving in two days and we are supposed to return in a day or so.",
                            TicketId = new Guid("f50a4a3a-2c17-4001-8d61-7c06ce1cea76")
                        },
                        new
                        {
                            Id = new Guid("a7ffac77-1b7d-4da1-861b-e22afcba6e30"),
                            CreatedOn = new DateTime(2025, 5, 17, 17, 37, 20, 824, DateTimeKind.Utc).AddTicks(7830),
                            CreatorId = new Guid("d2d36cc2-d7ac-4de5-aba0-6b931d26effb"),
                            Message = "Okay, Sandy, I will contact you as soon as the car is ready. Will you be needing further instructions for operating the vehicle?",
                            TicketId = new Guid("f50a4a3a-2c17-4001-8d61-7c06ce1cea76")
                        },
                        new
                        {
                            Id = new Guid("ba11cf23-1f99-4e68-a454-53fc48c84d71"),
                            CreatedOn = new DateTime(2025, 5, 17, 17, 37, 20, 824, DateTimeKind.Utc).AddTicks(7835),
                            CreatorId = new Guid("ed77f9d2-186b-4022-aabf-9788a17f9b1c"),
                            Message = "No, thank you, I have already driven this particular car. Have a great day!",
                            TicketId = new Guid("f50a4a3a-2c17-4001-8d61-7c06ce1cea76")
                        },
                        new
                        {
                            Id = new Guid("027e6256-1eb2-4505-a4e5-a21242672e92"),
                            CreatedOn = new DateTime(2025, 5, 17, 17, 37, 20, 824, DateTimeKind.Utc).AddTicks(7837),
                            CreatorId = new Guid("d2d36cc2-d7ac-4de5-aba0-6b931d26effb"),
                            Message = "You're welcome. Don't hesitate to contact me if you have any questions or need more assistance. Good day to you, too!",
                            TicketId = new Guid("f50a4a3a-2c17-4001-8d61-7c06ce1cea76")
                        },
                        new
                        {
                            Id = new Guid("3fbfabec-afdf-4983-bd48-294c1818092d"),
                            CreatedOn = new DateTime(2025, 5, 7, 17, 37, 20, 824, DateTimeKind.Utc).AddTicks(7839),
                            CreatorId = new Guid("6a28384f-8f2b-4fc3-843b-fec3b3b75693"),
                            Message = "Hello Mary, I have just received your request. I will be contacting you shortly.",
                            TicketId = new Guid("efe3136f-039e-4ccc-85d4-bcbafa335a4a")
                        },
                        new
                        {
                            Id = new Guid("ed3014b9-9bae-4c14-8958-7323a76bde3e"),
                            CreatedOn = new DateTime(2025, 5, 7, 17, 37, 20, 824, DateTimeKind.Utc).AddTicks(7846),
                            CreatorId = new Guid("3bfd7d25-a1e5-4f7e-a3bf-028ac195a51b"),
                            Message = "Hello Darcy, thank you for your prompt response. I will be waiting for your contact.",
                            TicketId = new Guid("efe3136f-039e-4ccc-85d4-bcbafa335a4a")
                        },
                        new
                        {
                            Id = new Guid("7823a93b-aac4-43a2-9219-b426f788d14b"),
                            CreatedOn = new DateTime(2025, 5, 21, 17, 37, 20, 824, DateTimeKind.Utc).AddTicks(7849),
                            CreatorId = new Guid("3bfd7d25-a1e5-4f7e-a3bf-028ac195a51b"),
                            Message = "Hello Sam, please restart your device and wait for further instructions. I will contact you in several minutes.",
                            TicketId = new Guid("4c6600ec-1e69-4572-9819-d21b155e2956")
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Department name");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fcb7fc7-cac3-43bf-ad1c-67be80208437"),
                            Name = "Engineering & Development"
                        },
                        new
                        {
                            Id = new Guid("b87a947d-8700-4bcd-b674-c459332b0076"),
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            Id = new Guid("0cd5a2c3-37dd-4c32-8fe5-94b781728e13"),
                            Name = "IT & Security"
                        },
                        new
                        {
                            Id = new Guid("60728fee-1021-44e5-9dde-59d82e334397"),
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = new Guid("12757374-5465-4725-b132-436e31bab030"),
                            Name = "Facilities"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket identifier");

                    b.Property<Guid>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket assigned to user identifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket category identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Ticket creation date");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket creator identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Ticket description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Ticket due date");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasComment("Ticket priority");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Ticket status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Ticket title");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94a8fb3c-6847-4ee8-bdf8-c0b7a3d03f0a"),
                            AssignedToUserId = new Guid("abf83cdd-fc9b-4d43-bf37-3093c1994edd"),
                            CategoryId = new Guid("350d8c0e-136a-4e69-9dd1-0565739107b9"),
                            CreatedOn = new DateTime(2025, 5, 21, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(6125),
                            CreatorId = new Guid("a4890fae-6461-4f73-a6a1-8072c74ba24b"),
                            Description = "My laptop is not turning on. I need it for work.",
                            DueDate = new DateTime(2025, 5, 22, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(6348),
                            Priority = 2,
                            Status = 0,
                            Title = "Laptop not working"
                        },
                        new
                        {
                            Id = new Guid("410f738e-b133-4878-8a50-bee63ef6abea"),
                            AssignedToUserId = new Guid("abf83cdd-fc9b-4d43-bf37-3093c1994edd"),
                            CategoryId = new Guid("350d8c0e-136a-4e69-9dd1-0565739107b9"),
                            CreatedOn = new DateTime(2025, 5, 21, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7154),
                            CreatorId = new Guid("6a28384f-8f2b-4fc3-843b-fec3b3b75693"),
                            Description = "My printer is not working. I have a presentation in 3 days and I need it.",
                            DueDate = new DateTime(2025, 5, 23, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7154),
                            Priority = 1,
                            Status = 0,
                            Title = "Printer not working"
                        },
                        new
                        {
                            Id = new Guid("090fde6c-4f28-4c9f-9368-78153c7f7729"),
                            AssignedToUserId = new Guid("abf83cdd-fc9b-4d43-bf37-3093c1994edd"),
                            CategoryId = new Guid("cd6788f9-2738-4795-ae67-21e46d812768"),
                            CreatedOn = new DateTime(2025, 5, 21, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7172),
                            CreatorId = new Guid("4ce1b44e-b99e-4c98-8948-1643bb09ba35"),
                            Description = "I need to install a new software on my laptop.",
                            Priority = 0,
                            Status = 0,
                            Title = "Software installation"
                        },
                        new
                        {
                            Id = new Guid("12a731cc-8d86-46ad-acca-e177ea969d8f"),
                            AssignedToUserId = new Guid("3bfd7d25-a1e5-4f7e-a3bf-028ac195a51b"),
                            CategoryId = new Guid("5639a07f-2dfe-43aa-9092-39d4a31723a4"),
                            CreatedOn = new DateTime(2025, 5, 21, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7175),
                            CreatorId = new Guid("a4890fae-6461-4f73-a6a1-8072c74ba24b"),
                            Description = "I am unable to connect to the network.",
                            Priority = 2,
                            Status = 1,
                            Title = "Network issue"
                        },
                        new
                        {
                            Id = new Guid("4c6600ec-1e69-4572-9819-d21b155e2956"),
                            AssignedToUserId = new Guid("abf83cdd-fc9b-4d43-bf37-3093c1994edd"),
                            CategoryId = new Guid("5639a07f-2dfe-43aa-9092-39d4a31723a4"),
                            CreatedOn = new DateTime(2025, 5, 21, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7177),
                            CreatorId = new Guid("a4890fae-6461-4f73-a6a1-8072c74ba24b"),
                            Description = "I need access to the new software.",
                            Priority = 1,
                            Status = 0,
                            Title = "Access request"
                        },
                        new
                        {
                            Id = new Guid("5d7b0cab-bb34-4ce7-88f2-389bb606cd21"),
                            AssignedToUserId = new Guid("abf83cdd-fc9b-4d43-bf37-3093c1994edd"),
                            CategoryId = new Guid("4c27736d-e075-4e27-9127-46005e712d86"),
                            CreatedOn = new DateTime(2025, 5, 21, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7181),
                            CreatorId = new Guid("4ce1b44e-b99e-4c98-8948-1643bb09ba35"),
                            Description = "I found a security issue in the system.",
                            Priority = 2,
                            Status = 0,
                            Title = "Security issue"
                        },
                        new
                        {
                            Id = new Guid("b0940a17-f6a7-47aa-84f3-bc357eb9b7c7"),
                            AssignedToUserId = new Guid("abf83cdd-fc9b-4d43-bf37-3093c1994edd"),
                            CategoryId = new Guid("0e5a49d6-a85e-4360-b108-d87b548b7c29"),
                            CreatedOn = new DateTime(2025, 5, 18, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7184),
                            CreatorId = new Guid("6a28384f-8f2b-4fc3-843b-fec3b3b75693"),
                            Description = "I need a conference room for a small meeting.",
                            DueDate = new DateTime(2025, 5, 28, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7185),
                            Priority = 1,
                            Status = 0,
                            Title = "Conference room needed"
                        },
                        new
                        {
                            Id = new Guid("efe3136f-039e-4ccc-85d4-bcbafa335a4a"),
                            AssignedToUserId = new Guid("6a28384f-8f2b-4fc3-843b-fec3b3b75693"),
                            CategoryId = new Guid("6054ce04-e0ff-4f37-accb-f6b18760ad49"),
                            CreatedOn = new DateTime(2025, 5, 6, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7187),
                            CreatorId = new Guid("3bfd7d25-a1e5-4f7e-a3bf-028ac195a51b"),
                            Description = "I need HR support for a new employee.",
                            Priority = 1,
                            Status = 3,
                            Title = "HR support needed"
                        },
                        new
                        {
                            Id = new Guid("3c54ce28-3de8-49ed-8611-4ecc26b5e8fa"),
                            AssignedToUserId = new Guid("3bfd7d25-a1e5-4f7e-a3bf-028ac195a51b"),
                            CategoryId = new Guid("cd6788f9-2738-4795-ae67-21e46d812768"),
                            CreatedOn = new DateTime(2025, 5, 11, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7189),
                            CreatorId = new Guid("a4890fae-6461-4f73-a6a1-8072c74ba24b"),
                            Description = "I need to update the software on my laptop.",
                            Priority = 0,
                            Status = 3,
                            Title = "Software update"
                        },
                        new
                        {
                            Id = new Guid("f50a4a3a-2c17-4001-8d61-7c06ce1cea76"),
                            AssignedToUserId = new Guid("d2d36cc2-d7ac-4de5-aba0-6b931d26effb"),
                            CategoryId = new Guid("0e5a49d6-a85e-4360-b108-d87b548b7c29"),
                            CreatedOn = new DateTime(2025, 5, 16, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7193),
                            CreatorId = new Guid("ed77f9d2-186b-4022-aabf-9788a17f9b1c"),
                            Description = "I need a company car for a business trip for 3 people.",
                            DueDate = new DateTime(2025, 5, 18, 17, 37, 20, 823, DateTimeKind.Utc).AddTicks(7193),
                            Priority = 1,
                            Status = 2,
                            Title = "Company car needed"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("3bfd7d25-a1e5-4f7e-a3bf-028ac195a51b")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("d2d36cc2-d7ac-4de5-aba0-6b931d26effb")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("6a28384f-8f2b-4fc3-843b-fec3b3b75693")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("abf83cdd-fc9b-4d43-bf37-3093c1994edd")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("abf83cdd-fc9b-4d43-bf37-3093c1994edd"),
                            RoleId = new Guid("93565863-5f33-4e14-9f8f-ffa20ec6c4a6")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Comment", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.Category", "Category")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
