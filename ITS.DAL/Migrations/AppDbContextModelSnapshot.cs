// <auto-generated />
using System;
using ITS.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITS.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f439325-7a78-4d47-8e5f-c58787c10b94"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("d5553e44-17ed-4ce2-808f-8d5f02a4ad18"),
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b94e4389-b297-4f9c-8dbd-5ed1d9d0ee94"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ad19fb3-52a5-4481-839d-8082218d9aaf",
                            DepartmentId = new Guid("e84fad18-ed54-47cd-aeaf-4c94b513d8bc"),
                            Email = "samj@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Samuel",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMJ@MAIL.COM",
                            NormalizedUserName = "SAMJ",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJNRYGaTJC6XLjVrXUYkKW15LtQPjYjcvVAg5Szzx7fvN/N7Ad0wTursMgP3cmbrQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SamJ"
                        },
                        new
                        {
                            Id = new Guid("98bd95e4-71a2-488a-a56d-12245dd7f291"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e0609e2-cc91-46ed-beb3-7f6bdc395f5a",
                            DepartmentId = new Guid("cc6a4f78-4c15-41e3-ae61-a6420f6de8cd"),
                            Email = "mlevin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mark",
                            LastName = "Levin",
                            LockoutEnabled = false,
                            NormalizedEmail = "MLEVIN@MAIL.COM",
                            NormalizedUserName = "MLEVIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ3MbPLWcpd5l1Qhm63T8hdDhvlyUBvrdU8ItuONCpmofyfeXM0dG9YJY5usN8AHzw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MLevin"
                        },
                        new
                        {
                            Id = new Guid("24ebeca2-8cda-4801-a113-725657e7b47a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd09a1c5-4b79-416d-b89b-536b3324960e",
                            DepartmentId = new Guid("2cd02069-2cb2-4b58-8cc5-58538f4480cb"),
                            Email = "maryc@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mary",
                            LastName = "Cooper",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARYC@MAIL.COM",
                            NormalizedUserName = "MARYC",
                            PasswordHash = "AQAAAAIAAYagAAAAEEg3Q25V0F//wByPaO4htd2IXvIuR/ZPAIjZ9IoHx7uMLtvpEnbxrNsX+p6LfV6wHw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MaryC"
                        },
                        new
                        {
                            Id = new Guid("b87a7720-d1f8-4160-8a3c-6c2922bb8946"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bafc0ae5-b031-4fb0-99f1-58f3daf74d75",
                            DepartmentId = new Guid("0ee540ac-e651-45f5-97c7-a908df086e2d"),
                            Email = "darcya@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Darcy",
                            LastName = "Abrams",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARCYA@MAIL.COM",
                            NormalizedUserName = "DARCYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJQrDZH+DG8jcc3ARVedaOYmztq3rAvZJ9GmTqOIhLL+aBtYLhMc/5TBrdjvMBxp0g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "DarcyA"
                        },
                        new
                        {
                            Id = new Guid("a4f4d3c9-eaf1-4708-9837-e9b4aeb53d7c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98a7c063-d20c-42ed-9336-52676e3aa2b6",
                            DepartmentId = new Guid("0ee540ac-e651-45f5-97c7-a908df086e2d"),
                            Email = "sandyb@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Sandy",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "SANDYB@MAIL.COM",
                            NormalizedUserName = "SANDYB",
                            PasswordHash = "AQAAAAIAAYagAAAAENUG7A1UyCGRQhmOruYmaRofr8Aj7XmQw4p1obWk661OfUromW8lR29cg/wgRy5Ixw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SandyB"
                        },
                        new
                        {
                            Id = new Guid("0480d7eb-c544-4058-8b07-c828104189af"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bb7efe5-a723-4604-9e2d-92b3d40b0b80",
                            DepartmentId = new Guid("c3f276a1-35a7-4b50-bfbc-373f706d5cd5"),
                            Email = "stanleym@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Stanley",
                            LastName = "Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANLEYM@MAIL.COM",
                            NormalizedUserName = "STANM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF2pE5ECgm7TWxN7uExaXLhUWv0lbC4pGqowWBY+J9iRDnfma4NhyeV3nA3RTtxhEw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "StanM"
                        },
                        new
                        {
                            Id = new Guid("291f114d-6be7-4af0-b73f-ee8690597885"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b4dd194-4a6a-459f-8668-c4574e6e3e3d",
                            DepartmentId = new Guid("2cd02069-2cb2-4b58-8cc5-58538f4480cb"),
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Garry",
                            LastName = "Francis",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEK/ZkT51moQ3lBZpwOy53lnz2uEFtdlUoBcB4zw3hwje1g/WqHP/TyWjiDl27+szoA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "AdminUser"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34afa6e3-d6d1-42b0-afc4-9a9b5edd278b"),
                            Name = "Hardware"
                        },
                        new
                        {
                            Id = new Guid("cfaff174-8b18-46f8-bcb3-87dd2ffec7ad"),
                            Name = "Software"
                        },
                        new
                        {
                            Id = new Guid("9c9d0d44-2ab3-4912-8c04-2f2192ed80e1"),
                            Name = "Network & Access Request"
                        },
                        new
                        {
                            Id = new Guid("fe9fdc3f-7e82-47f8-a432-76ea5bbfd396"),
                            Name = "Security"
                        },
                        new
                        {
                            Id = new Guid("c21d907c-a05f-4b7f-b4b2-e989dffb8d2a"),
                            Name = "Facilities"
                        },
                        new
                        {
                            Id = new Guid("98d8e692-4707-475e-b870-92a37f881986"),
                            Name = "HR"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Comment identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Comment creation date");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Comment creator identifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Comment description");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket identifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("681e27c5-8fdb-49d2-931c-ca0d8f322975"),
                            CreatedOn = new DateTime(2025, 6, 4, 17, 24, 23, 431, DateTimeKind.Utc).AddTicks(2567),
                            CreatorId = new Guid("0480d7eb-c544-4058-8b07-c828104189af"),
                            Message = "Hello Sandy, we have a Honda Civic and a Toyota 4Runner available. Would you need a large luggage space or will you be travelling light?",
                            TicketId = new Guid("b5f59953-c062-4e40-bbde-c5263ad61fa0")
                        },
                        new
                        {
                            Id = new Guid("787b1fce-2a40-4090-9a0c-948d0a295237"),
                            CreatedOn = new DateTime(2025, 6, 4, 17, 24, 23, 431, DateTimeKind.Utc).AddTicks(3353),
                            CreatorId = new Guid("a4f4d3c9-eaf1-4708-9837-e9b4aeb53d7c"),
                            Message = "Hello Stan, we will be travelling with a total of 3 carry-on luggages, as well as one large suitcase.",
                            TicketId = new Guid("b5f59953-c062-4e40-bbde-c5263ad61fa0")
                        },
                        new
                        {
                            Id = new Guid("738b0d6e-0a9d-49eb-b40a-c1140881de5a"),
                            CreatedOn = new DateTime(2025, 6, 4, 17, 24, 23, 431, DateTimeKind.Utc).AddTicks(3356),
                            CreatorId = new Guid("0480d7eb-c544-4058-8b07-c828104189af"),
                            Message = "Sandy, based on your luggage size I would reccoment you to take the Toyota 4Runner. When are you supposed to leave and return?",
                            TicketId = new Guid("b5f59953-c062-4e40-bbde-c5263ad61fa0")
                        },
                        new
                        {
                            Id = new Guid("51d38196-9d32-4c8f-a835-e13d920d09c2"),
                            CreatedOn = new DateTime(2025, 6, 4, 17, 24, 23, 431, DateTimeKind.Utc).AddTicks(3358),
                            CreatorId = new Guid("a4f4d3c9-eaf1-4708-9837-e9b4aeb53d7c"),
                            Message = "Stan, we will be leaving in two days and we are supposed to return in a day or so.",
                            TicketId = new Guid("b5f59953-c062-4e40-bbde-c5263ad61fa0")
                        },
                        new
                        {
                            Id = new Guid("c2e2b02c-fad2-4218-be20-4c4c87a84a1a"),
                            CreatedOn = new DateTime(2025, 6, 4, 17, 24, 23, 431, DateTimeKind.Utc).AddTicks(3360),
                            CreatorId = new Guid("0480d7eb-c544-4058-8b07-c828104189af"),
                            Message = "Okay, Sandy, I will contact you as soon as the car is ready. Will you be needing further instructions for operating the vehicle?",
                            TicketId = new Guid("b5f59953-c062-4e40-bbde-c5263ad61fa0")
                        },
                        new
                        {
                            Id = new Guid("24c61f63-fd5d-4acd-8eaa-1639a53bbf14"),
                            CreatedOn = new DateTime(2025, 6, 4, 17, 24, 23, 431, DateTimeKind.Utc).AddTicks(3364),
                            CreatorId = new Guid("a4f4d3c9-eaf1-4708-9837-e9b4aeb53d7c"),
                            Message = "No, thank you, I have already driven this particular car. Have a great day!",
                            TicketId = new Guid("b5f59953-c062-4e40-bbde-c5263ad61fa0")
                        },
                        new
                        {
                            Id = new Guid("8a9a9810-cf14-4952-a885-90f3caaf30a2"),
                            CreatedOn = new DateTime(2025, 6, 4, 17, 24, 23, 431, DateTimeKind.Utc).AddTicks(3366),
                            CreatorId = new Guid("0480d7eb-c544-4058-8b07-c828104189af"),
                            Message = "You're welcome. Don't hesitate to contact me if you have any questions or need more assistance. Good day to you, too!",
                            TicketId = new Guid("b5f59953-c062-4e40-bbde-c5263ad61fa0")
                        },
                        new
                        {
                            Id = new Guid("73432f43-3b18-40cd-b6df-48411eeaed0c"),
                            CreatedOn = new DateTime(2025, 5, 25, 17, 24, 23, 431, DateTimeKind.Utc).AddTicks(3374),
                            CreatorId = new Guid("b87a7720-d1f8-4160-8a3c-6c2922bb8946"),
                            Message = "Hello Mary, I have just received your request. I will be contacting you shortly.",
                            TicketId = new Guid("57579abc-57eb-4594-88a2-cd9d653cbd65")
                        },
                        new
                        {
                            Id = new Guid("947c5db9-5773-4730-a026-924f67394160"),
                            CreatedOn = new DateTime(2025, 5, 25, 17, 24, 23, 431, DateTimeKind.Utc).AddTicks(3444),
                            CreatorId = new Guid("24ebeca2-8cda-4801-a113-725657e7b47a"),
                            Message = "Hello Darcy, thank you for your prompt response. I will be waiting for your contact.",
                            TicketId = new Guid("57579abc-57eb-4594-88a2-cd9d653cbd65")
                        },
                        new
                        {
                            Id = new Guid("bbde4056-0b8c-42fa-b6ec-72e27d568096"),
                            CreatedOn = new DateTime(2025, 6, 8, 17, 24, 23, 431, DateTimeKind.Utc).AddTicks(3447),
                            CreatorId = new Guid("24ebeca2-8cda-4801-a113-725657e7b47a"),
                            Message = "Hello Sam, please restart your device and wait for further instructions. I will contact you in several minutes.",
                            TicketId = new Guid("cc9a909d-37f6-4225-8148-9b96264a167b")
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Department name");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e84fad18-ed54-47cd-aeaf-4c94b513d8bc"),
                            Name = "Engineering & Development"
                        },
                        new
                        {
                            Id = new Guid("cc6a4f78-4c15-41e3-ae61-a6420f6de8cd"),
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            Id = new Guid("2cd02069-2cb2-4b58-8cc5-58538f4480cb"),
                            Name = "IT & Security"
                        },
                        new
                        {
                            Id = new Guid("0ee540ac-e651-45f5-97c7-a908df086e2d"),
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = new Guid("c3f276a1-35a7-4b50-bfbc-373f706d5cd5"),
                            Name = "Facilities"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket identifier");

                    b.Property<Guid>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket assigned to user identifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket category identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Ticket creation date");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket creator identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Ticket description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Ticket due date");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasComment("Ticket priority");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Ticket status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Ticket title");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d33367f-02f9-4324-be87-30e5f65be109"),
                            AssignedToUserId = new Guid("291f114d-6be7-4af0-b73f-ee8690597885"),
                            CategoryId = new Guid("34afa6e3-d6d1-42b0-afc4-9a9b5edd278b"),
                            CreatedOn = new DateTime(2025, 6, 8, 17, 24, 23, 429, DateTimeKind.Utc).AddTicks(4631),
                            CreatorId = new Guid("b94e4389-b297-4f9c-8dbd-5ed1d9d0ee94"),
                            Description = "My laptop is not turning on. I need it for work.",
                            DueDate = new DateTime(2025, 6, 9, 17, 24, 23, 429, DateTimeKind.Utc).AddTicks(4888),
                            Priority = 2,
                            Status = 0,
                            Title = "Laptop not working"
                        },
                        new
                        {
                            Id = new Guid("461191ed-d0b0-43e5-982b-426f1b369ba6"),
                            AssignedToUserId = new Guid("291f114d-6be7-4af0-b73f-ee8690597885"),
                            CategoryId = new Guid("34afa6e3-d6d1-42b0-afc4-9a9b5edd278b"),
                            CreatedOn = new DateTime(2025, 6, 8, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1220),
                            CreatorId = new Guid("b87a7720-d1f8-4160-8a3c-6c2922bb8946"),
                            Description = "My printer is not working. I have a presentation in 3 days and I need it.",
                            DueDate = new DateTime(2025, 6, 10, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1221),
                            Priority = 1,
                            Status = 0,
                            Title = "Printer not working"
                        },
                        new
                        {
                            Id = new Guid("a296e1e3-57c0-45b9-8e9d-9332cd6bbf1a"),
                            AssignedToUserId = new Guid("291f114d-6be7-4af0-b73f-ee8690597885"),
                            CategoryId = new Guid("cfaff174-8b18-46f8-bcb3-87dd2ffec7ad"),
                            CreatedOn = new DateTime(2025, 6, 8, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1233),
                            CreatorId = new Guid("98bd95e4-71a2-488a-a56d-12245dd7f291"),
                            Description = "I need to install a new software on my laptop.",
                            Priority = 0,
                            Status = 0,
                            Title = "Software installation"
                        },
                        new
                        {
                            Id = new Guid("0039715b-ddf1-4aba-8e7b-9dc2eb1afb68"),
                            AssignedToUserId = new Guid("24ebeca2-8cda-4801-a113-725657e7b47a"),
                            CategoryId = new Guid("9c9d0d44-2ab3-4912-8c04-2f2192ed80e1"),
                            CreatedOn = new DateTime(2025, 6, 8, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1236),
                            CreatorId = new Guid("b94e4389-b297-4f9c-8dbd-5ed1d9d0ee94"),
                            Description = "I am unable to connect to the network.",
                            Priority = 2,
                            Status = 1,
                            Title = "Network issue"
                        },
                        new
                        {
                            Id = new Guid("cc9a909d-37f6-4225-8148-9b96264a167b"),
                            AssignedToUserId = new Guid("291f114d-6be7-4af0-b73f-ee8690597885"),
                            CategoryId = new Guid("9c9d0d44-2ab3-4912-8c04-2f2192ed80e1"),
                            CreatedOn = new DateTime(2025, 6, 8, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1238),
                            CreatorId = new Guid("b94e4389-b297-4f9c-8dbd-5ed1d9d0ee94"),
                            Description = "I need access to the new software.",
                            Priority = 1,
                            Status = 0,
                            Title = "Access request"
                        },
                        new
                        {
                            Id = new Guid("4867a566-c6f2-4a77-8222-0daaf53d49a1"),
                            AssignedToUserId = new Guid("291f114d-6be7-4af0-b73f-ee8690597885"),
                            CategoryId = new Guid("fe9fdc3f-7e82-47f8-a432-76ea5bbfd396"),
                            CreatedOn = new DateTime(2025, 6, 8, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1243),
                            CreatorId = new Guid("98bd95e4-71a2-488a-a56d-12245dd7f291"),
                            Description = "I found a security issue in the system.",
                            Priority = 2,
                            Status = 0,
                            Title = "Security issue"
                        },
                        new
                        {
                            Id = new Guid("0ca2655c-e434-4e00-a84b-2bff2aa7f765"),
                            AssignedToUserId = new Guid("291f114d-6be7-4af0-b73f-ee8690597885"),
                            CategoryId = new Guid("c21d907c-a05f-4b7f-b4b2-e989dffb8d2a"),
                            CreatedOn = new DateTime(2025, 6, 5, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1246),
                            CreatorId = new Guid("b87a7720-d1f8-4160-8a3c-6c2922bb8946"),
                            Description = "I need a conference room for a small meeting.",
                            DueDate = new DateTime(2025, 6, 15, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1246),
                            Priority = 1,
                            Status = 0,
                            Title = "Conference room needed"
                        },
                        new
                        {
                            Id = new Guid("57579abc-57eb-4594-88a2-cd9d653cbd65"),
                            AssignedToUserId = new Guid("b87a7720-d1f8-4160-8a3c-6c2922bb8946"),
                            CategoryId = new Guid("98d8e692-4707-475e-b870-92a37f881986"),
                            CreatedOn = new DateTime(2025, 5, 24, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1249),
                            CreatorId = new Guid("24ebeca2-8cda-4801-a113-725657e7b47a"),
                            Description = "I need HR support for a new employee.",
                            Priority = 1,
                            Status = 3,
                            Title = "HR support needed"
                        },
                        new
                        {
                            Id = new Guid("2e246a75-e482-415d-adb8-b3b7545ad77c"),
                            AssignedToUserId = new Guid("24ebeca2-8cda-4801-a113-725657e7b47a"),
                            CategoryId = new Guid("cfaff174-8b18-46f8-bcb3-87dd2ffec7ad"),
                            CreatedOn = new DateTime(2025, 5, 29, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1251),
                            CreatorId = new Guid("b94e4389-b297-4f9c-8dbd-5ed1d9d0ee94"),
                            Description = "I need to update the software on my laptop.",
                            Priority = 0,
                            Status = 3,
                            Title = "Software update"
                        },
                        new
                        {
                            Id = new Guid("b5f59953-c062-4e40-bbde-c5263ad61fa0"),
                            AssignedToUserId = new Guid("0480d7eb-c544-4058-8b07-c828104189af"),
                            CategoryId = new Guid("c21d907c-a05f-4b7f-b4b2-e989dffb8d2a"),
                            CreatedOn = new DateTime(2025, 6, 3, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1269),
                            CreatorId = new Guid("a4f4d3c9-eaf1-4708-9837-e9b4aeb53d7c"),
                            Description = "I need a company car for a business trip for 3 people.",
                            DueDate = new DateTime(2025, 6, 5, 17, 24, 23, 430, DateTimeKind.Utc).AddTicks(1270),
                            Priority = 1,
                            Status = 2,
                            Title = "Company car needed"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("24ebeca2-8cda-4801-a113-725657e7b47a")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("0480d7eb-c544-4058-8b07-c828104189af")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("b87a7720-d1f8-4160-8a3c-6c2922bb8946")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("291f114d-6be7-4af0-b73f-ee8690597885")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("291f114d-6be7-4af0-b73f-ee8690597885"),
                            RoleId = new Guid("5f439325-7a78-4d47-8e5f-c58787c10b94")
                        },
                        new
                        {
                            UserId = new Guid("b94e4389-b297-4f9c-8dbd-5ed1d9d0ee94"),
                            RoleId = new Guid("d5553e44-17ed-4ce2-808f-8d5f02a4ad18")
                        },
                        new
                        {
                            UserId = new Guid("98bd95e4-71a2-488a-a56d-12245dd7f291"),
                            RoleId = new Guid("d5553e44-17ed-4ce2-808f-8d5f02a4ad18")
                        },
                        new
                        {
                            UserId = new Guid("24ebeca2-8cda-4801-a113-725657e7b47a"),
                            RoleId = new Guid("d5553e44-17ed-4ce2-808f-8d5f02a4ad18")
                        },
                        new
                        {
                            UserId = new Guid("b87a7720-d1f8-4160-8a3c-6c2922bb8946"),
                            RoleId = new Guid("d5553e44-17ed-4ce2-808f-8d5f02a4ad18")
                        },
                        new
                        {
                            UserId = new Guid("a4f4d3c9-eaf1-4708-9837-e9b4aeb53d7c"),
                            RoleId = new Guid("d5553e44-17ed-4ce2-808f-8d5f02a4ad18")
                        },
                        new
                        {
                            UserId = new Guid("0480d7eb-c544-4058-8b07-c828104189af"),
                            RoleId = new Guid("d5553e44-17ed-4ce2-808f-8d5f02a4ad18")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Comment", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.Category", "Category")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
