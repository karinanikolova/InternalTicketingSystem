// <auto-generated />
using System;
using ITS.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITS.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("22b3a385-dd4e-4d86-836e-2909f1add421"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("df6c1eef-5e87-448b-a123-68ef7ed568c1"),
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2310846-a216-40d2-bb35-fe7492b82718"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4505ec21-5c54-49d9-a1d4-2d6e31c74548",
                            DepartmentId = new Guid("928c2995-b16b-40c8-b77d-dd18d8525f28"),
                            Email = "samj@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Samuel",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMJ@MAIL.COM",
                            NormalizedUserName = "SAMJ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBVmijUKuvIh5wI+Ke8hkf0FlEtT5wESJrAWqEy5F0cVD2St8Y0dMwqOBaAQE7YKUg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SamJ"
                        },
                        new
                        {
                            Id = new Guid("c69f3217-12e3-45ce-b5f8-84ebf4fcd77f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4d09310-46cb-4c17-bff4-7549a574d0e1",
                            DepartmentId = new Guid("37a90661-82aa-44a5-b267-079d36832bdb"),
                            Email = "mlevin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mark",
                            LastName = "Levin",
                            LockoutEnabled = false,
                            NormalizedEmail = "MLEVIN@MAIL.COM",
                            NormalizedUserName = "MLEVIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJBgyo5UfidFog+oskkL0MSM1RHFN+KubTUGqd+yy6xIZBt/3t1rFkNz1GEUNXoouA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MLevin"
                        },
                        new
                        {
                            Id = new Guid("6330ce51-dc59-4d13-9bc8-a10e7e435cd6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d971b547-1c57-4458-b7b8-a9e3453bb4ab",
                            DepartmentId = new Guid("ac0b620f-da33-4ea7-8425-f3ad0d9d6789"),
                            Email = "maryc@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Mary",
                            LastName = "Cooper",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARYC@MAIL.COM",
                            NormalizedUserName = "MARYC",
                            PasswordHash = "AQAAAAIAAYagAAAAEOayuy//YBZ9/nUNmR82KwZ3RebZX6mPtpepaWcQAOgy7YM6ICXor34+fDbJRS6WTQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MaryC"
                        },
                        new
                        {
                            Id = new Guid("527e8d2d-45af-4888-b323-8a13c65682aa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fdd065c-9b82-4f30-8118-34791afb6a12",
                            DepartmentId = new Guid("f3021af9-370e-4766-bb64-fed4b1fdff8e"),
                            Email = "darcya@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Darcy",
                            LastName = "Abrams",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARCYA@MAIL.COM",
                            NormalizedUserName = "DARCYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEIti6NA3UxqmCgILlTS+oFf2YeLN9suufXG66qsfSecjoIpW/Dyk5wEaIgpmwJ83UA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "DarcyA"
                        },
                        new
                        {
                            Id = new Guid("65c01962-0033-452e-87f7-ee2f7db4ac42"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f018859-2976-4096-95e5-ac389507659a",
                            DepartmentId = new Guid("f3021af9-370e-4766-bb64-fed4b1fdff8e"),
                            Email = "sandyb@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Sandy",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "SANDYB@MAIL.COM",
                            NormalizedUserName = "SANDYB",
                            PasswordHash = "AQAAAAIAAYagAAAAEATJLHHpXPMDBJpvG5lZqG9+eclAn1UvV9mZAQ4BrlFeyzOPemCaUOdiaEdfhyl9OQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SandyB"
                        },
                        new
                        {
                            Id = new Guid("3c818c4e-4ad8-4703-af4d-4c8677cf5874"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "228fff85-b91e-4bd9-8a93-e9f45ce529b9",
                            DepartmentId = new Guid("afc6278b-748f-4546-bcb9-2e1b43f402dd"),
                            Email = "stanleym@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Stanley",
                            LastName = "Morgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "STANLEYM@MAIL.COM",
                            NormalizedUserName = "STANM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFIwQebW2ouQjU8TY2ZSiwmLXj8aUuNt2Sh0R3Bl0t6BQiJWYPhsVvByD7Ln9RPP0Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "StanM"
                        },
                        new
                        {
                            Id = new Guid("05abc7b7-e554-485f-a419-19ce2945e0e3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f4b8d02b-2224-43e9-9992-77d296d6ed3a",
                            DepartmentId = new Guid("ac0b620f-da33-4ea7-8425-f3ad0d9d6789"),
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Garry",
                            LastName = "Francis",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEE6F1EfyOu32U3PsU7s+XRMPCo6n9gesWvidGhMC2W7ZY8s4yhiZ24+toayF6ITBvw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "AdminUser"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c72716ef-fb8e-4355-b653-a4ec6a41cb36"),
                            Name = "Hardware"
                        },
                        new
                        {
                            Id = new Guid("fdf9c1f4-58a8-41d2-8687-f1819fec2d8a"),
                            Name = "Software"
                        },
                        new
                        {
                            Id = new Guid("7160fdfa-f038-4743-b23f-543b4c1a4786"),
                            Name = "Network & Access Request"
                        },
                        new
                        {
                            Id = new Guid("c8716d5b-b764-42fa-8830-5f8d98ec5a65"),
                            Name = "Security"
                        },
                        new
                        {
                            Id = new Guid("077afb68-01e2-4ca2-ba80-cb53a34e6904"),
                            Name = "Facilities"
                        },
                        new
                        {
                            Id = new Guid("192d6dd7-c8ee-4df0-9d24-acaa766fa556"),
                            Name = "HR"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Comment identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Comment creation date");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Comment creator identifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Comment description");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket identifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a53f44a-1f1d-41cc-8964-c757943fb084"),
                            CreatedOn = new DateTime(2025, 5, 24, 15, 41, 50, 896, DateTimeKind.Utc).AddTicks(9238),
                            CreatorId = new Guid("3c818c4e-4ad8-4703-af4d-4c8677cf5874"),
                            Message = "Hello Sandy, we have a Honda Civic and a Toyota 4Runner available. Would you need a large luggage space or will you be travelling light?",
                            TicketId = new Guid("d9d75702-668e-43da-af16-b1f58ee92f4a")
                        },
                        new
                        {
                            Id = new Guid("93dca21a-5bd6-46a4-8e85-693bc3d18712"),
                            CreatedOn = new DateTime(2025, 5, 24, 15, 41, 50, 897, DateTimeKind.Utc).AddTicks(33),
                            CreatorId = new Guid("65c01962-0033-452e-87f7-ee2f7db4ac42"),
                            Message = "Hello Stan, we will be travelling with a total of 3 carry-on luggages, as well as one large suitcase.",
                            TicketId = new Guid("d9d75702-668e-43da-af16-b1f58ee92f4a")
                        },
                        new
                        {
                            Id = new Guid("442bf548-2bfc-4e7b-9db4-7c8584c80d4e"),
                            CreatedOn = new DateTime(2025, 5, 24, 15, 41, 50, 897, DateTimeKind.Utc).AddTicks(37),
                            CreatorId = new Guid("3c818c4e-4ad8-4703-af4d-4c8677cf5874"),
                            Message = "Sandy, based on your luggage size I would reccoment you to take the Toyota 4Runner. When are you supposed to leave and return?",
                            TicketId = new Guid("d9d75702-668e-43da-af16-b1f58ee92f4a")
                        },
                        new
                        {
                            Id = new Guid("b0d1e9f2-6c8d-4b61-8451-2842eaeb7341"),
                            CreatedOn = new DateTime(2025, 5, 24, 15, 41, 50, 897, DateTimeKind.Utc).AddTicks(40),
                            CreatorId = new Guid("65c01962-0033-452e-87f7-ee2f7db4ac42"),
                            Message = "Stan, we will be leaving in two days and we are supposed to return in a day or so.",
                            TicketId = new Guid("d9d75702-668e-43da-af16-b1f58ee92f4a")
                        },
                        new
                        {
                            Id = new Guid("20340d4e-ce5a-457b-bb64-7b3dd79543d0"),
                            CreatedOn = new DateTime(2025, 5, 24, 15, 41, 50, 897, DateTimeKind.Utc).AddTicks(55),
                            CreatorId = new Guid("3c818c4e-4ad8-4703-af4d-4c8677cf5874"),
                            Message = "Okay, Sandy, I will contact you as soon as the car is ready. Will you be needing further instructions for operating the vehicle?",
                            TicketId = new Guid("d9d75702-668e-43da-af16-b1f58ee92f4a")
                        },
                        new
                        {
                            Id = new Guid("c541d904-d20f-4b36-81fd-60aaf95b6905"),
                            CreatedOn = new DateTime(2025, 5, 24, 15, 41, 50, 897, DateTimeKind.Utc).AddTicks(66),
                            CreatorId = new Guid("65c01962-0033-452e-87f7-ee2f7db4ac42"),
                            Message = "No, thank you, I have already driven this particular car. Have a great day!",
                            TicketId = new Guid("d9d75702-668e-43da-af16-b1f58ee92f4a")
                        },
                        new
                        {
                            Id = new Guid("781819af-deb7-4efe-9da3-1d2e30b4b559"),
                            CreatedOn = new DateTime(2025, 5, 24, 15, 41, 50, 897, DateTimeKind.Utc).AddTicks(76),
                            CreatorId = new Guid("3c818c4e-4ad8-4703-af4d-4c8677cf5874"),
                            Message = "You're welcome. Don't hesitate to contact me if you have any questions or need more assistance. Good day to you, too!",
                            TicketId = new Guid("d9d75702-668e-43da-af16-b1f58ee92f4a")
                        },
                        new
                        {
                            Id = new Guid("6de041ad-a28e-4ee2-ab71-dd0c8d1b9566"),
                            CreatedOn = new DateTime(2025, 5, 14, 15, 41, 50, 897, DateTimeKind.Utc).AddTicks(78),
                            CreatorId = new Guid("527e8d2d-45af-4888-b323-8a13c65682aa"),
                            Message = "Hello Mary, I have just received your request. I will be contacting you shortly.",
                            TicketId = new Guid("87e3cba6-a0cd-4ab3-9b11-306507c6c6cb")
                        },
                        new
                        {
                            Id = new Guid("27145fee-a563-48a9-a071-df55f5058a57"),
                            CreatedOn = new DateTime(2025, 5, 14, 15, 41, 50, 897, DateTimeKind.Utc).AddTicks(80),
                            CreatorId = new Guid("6330ce51-dc59-4d13-9bc8-a10e7e435cd6"),
                            Message = "Hello Darcy, thank you for your prompt response. I will be waiting for your contact.",
                            TicketId = new Guid("87e3cba6-a0cd-4ab3-9b11-306507c6c6cb")
                        },
                        new
                        {
                            Id = new Guid("23eff7e6-1a19-4f8e-b319-19cc0b0ed2d6"),
                            CreatedOn = new DateTime(2025, 5, 28, 15, 41, 50, 897, DateTimeKind.Utc).AddTicks(83),
                            CreatorId = new Guid("6330ce51-dc59-4d13-9bc8-a10e7e435cd6"),
                            Message = "Hello Sam, please restart your device and wait for further instructions. I will contact you in several minutes.",
                            TicketId = new Guid("c019231d-b05e-49e0-a8bb-2a85c6355bdf")
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Department identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Department name");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("928c2995-b16b-40c8-b77d-dd18d8525f28"),
                            Name = "Engineering & Development"
                        },
                        new
                        {
                            Id = new Guid("37a90661-82aa-44a5-b267-079d36832bdb"),
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            Id = new Guid("ac0b620f-da33-4ea7-8425-f3ad0d9d6789"),
                            Name = "IT & Security"
                        },
                        new
                        {
                            Id = new Guid("f3021af9-370e-4766-bb64-fed4b1fdff8e"),
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = new Guid("afc6278b-748f-4546-bcb9-2e1b43f402dd"),
                            Name = "Facilities"
                        });
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket identifier");

                    b.Property<Guid>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket assigned to user identifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket category identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Ticket creation date");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket creator identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Ticket description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Ticket due date");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasComment("Ticket priority");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Ticket status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Ticket title");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b344f46c-3fb0-4ed7-9510-b90280fb3866"),
                            AssignedToUserId = new Guid("05abc7b7-e554-485f-a419-19ce2945e0e3"),
                            CategoryId = new Guid("c72716ef-fb8e-4355-b653-a4ec6a41cb36"),
                            CreatedOn = new DateTime(2025, 5, 28, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(3714),
                            CreatorId = new Guid("f2310846-a216-40d2-bb35-fe7492b82718"),
                            Description = "My laptop is not turning on. I need it for work.",
                            DueDate = new DateTime(2025, 5, 29, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(3973),
                            Priority = 2,
                            Status = 0,
                            Title = "Laptop not working"
                        },
                        new
                        {
                            Id = new Guid("d7c5e601-71a8-4dfa-9157-302468373179"),
                            AssignedToUserId = new Guid("05abc7b7-e554-485f-a419-19ce2945e0e3"),
                            CategoryId = new Guid("c72716ef-fb8e-4355-b653-a4ec6a41cb36"),
                            CreatedOn = new DateTime(2025, 5, 28, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(4956),
                            CreatorId = new Guid("527e8d2d-45af-4888-b323-8a13c65682aa"),
                            Description = "My printer is not working. I have a presentation in 3 days and I need it.",
                            DueDate = new DateTime(2025, 5, 30, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(4957),
                            Priority = 1,
                            Status = 0,
                            Title = "Printer not working"
                        },
                        new
                        {
                            Id = new Guid("c5cf35e2-8ef9-4da3-84b9-98955f3b12b5"),
                            AssignedToUserId = new Guid("05abc7b7-e554-485f-a419-19ce2945e0e3"),
                            CategoryId = new Guid("fdf9c1f4-58a8-41d2-8687-f1819fec2d8a"),
                            CreatedOn = new DateTime(2025, 5, 28, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(4967),
                            CreatorId = new Guid("c69f3217-12e3-45ce-b5f8-84ebf4fcd77f"),
                            Description = "I need to install a new software on my laptop.",
                            Priority = 0,
                            Status = 0,
                            Title = "Software installation"
                        },
                        new
                        {
                            Id = new Guid("05772994-8e9d-4dd9-89ab-3af31525bee9"),
                            AssignedToUserId = new Guid("6330ce51-dc59-4d13-9bc8-a10e7e435cd6"),
                            CategoryId = new Guid("7160fdfa-f038-4743-b23f-543b4c1a4786"),
                            CreatedOn = new DateTime(2025, 5, 28, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(4969),
                            CreatorId = new Guid("f2310846-a216-40d2-bb35-fe7492b82718"),
                            Description = "I am unable to connect to the network.",
                            Priority = 2,
                            Status = 1,
                            Title = "Network issue"
                        },
                        new
                        {
                            Id = new Guid("c019231d-b05e-49e0-a8bb-2a85c6355bdf"),
                            AssignedToUserId = new Guid("05abc7b7-e554-485f-a419-19ce2945e0e3"),
                            CategoryId = new Guid("7160fdfa-f038-4743-b23f-543b4c1a4786"),
                            CreatedOn = new DateTime(2025, 5, 28, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(4972),
                            CreatorId = new Guid("f2310846-a216-40d2-bb35-fe7492b82718"),
                            Description = "I need access to the new software.",
                            Priority = 1,
                            Status = 0,
                            Title = "Access request"
                        },
                        new
                        {
                            Id = new Guid("8b969b26-8719-45fd-b698-6cb7adc88c27"),
                            AssignedToUserId = new Guid("05abc7b7-e554-485f-a419-19ce2945e0e3"),
                            CategoryId = new Guid("c8716d5b-b764-42fa-8830-5f8d98ec5a65"),
                            CreatedOn = new DateTime(2025, 5, 28, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(4980),
                            CreatorId = new Guid("c69f3217-12e3-45ce-b5f8-84ebf4fcd77f"),
                            Description = "I found a security issue in the system.",
                            Priority = 2,
                            Status = 0,
                            Title = "Security issue"
                        },
                        new
                        {
                            Id = new Guid("3f68d665-78f1-4913-b86a-14fbc6320e44"),
                            AssignedToUserId = new Guid("05abc7b7-e554-485f-a419-19ce2945e0e3"),
                            CategoryId = new Guid("077afb68-01e2-4ca2-ba80-cb53a34e6904"),
                            CreatedOn = new DateTime(2025, 5, 25, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(4983),
                            CreatorId = new Guid("527e8d2d-45af-4888-b323-8a13c65682aa"),
                            Description = "I need a conference room for a small meeting.",
                            DueDate = new DateTime(2025, 6, 4, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(4983),
                            Priority = 1,
                            Status = 0,
                            Title = "Conference room needed"
                        },
                        new
                        {
                            Id = new Guid("87e3cba6-a0cd-4ab3-9b11-306507c6c6cb"),
                            AssignedToUserId = new Guid("527e8d2d-45af-4888-b323-8a13c65682aa"),
                            CategoryId = new Guid("192d6dd7-c8ee-4df0-9d24-acaa766fa556"),
                            CreatedOn = new DateTime(2025, 5, 13, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(4986),
                            CreatorId = new Guid("6330ce51-dc59-4d13-9bc8-a10e7e435cd6"),
                            Description = "I need HR support for a new employee.",
                            Priority = 1,
                            Status = 3,
                            Title = "HR support needed"
                        },
                        new
                        {
                            Id = new Guid("662951ec-01fb-4702-b327-c82321b001da"),
                            AssignedToUserId = new Guid("6330ce51-dc59-4d13-9bc8-a10e7e435cd6"),
                            CategoryId = new Guid("fdf9c1f4-58a8-41d2-8687-f1819fec2d8a"),
                            CreatedOn = new DateTime(2025, 5, 18, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(5072),
                            CreatorId = new Guid("f2310846-a216-40d2-bb35-fe7492b82718"),
                            Description = "I need to update the software on my laptop.",
                            Priority = 0,
                            Status = 3,
                            Title = "Software update"
                        },
                        new
                        {
                            Id = new Guid("d9d75702-668e-43da-af16-b1f58ee92f4a"),
                            AssignedToUserId = new Guid("3c818c4e-4ad8-4703-af4d-4c8677cf5874"),
                            CategoryId = new Guid("077afb68-01e2-4ca2-ba80-cb53a34e6904"),
                            CreatedOn = new DateTime(2025, 5, 23, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(5075),
                            CreatorId = new Guid("65c01962-0033-452e-87f7-ee2f7db4ac42"),
                            Description = "I need a company car for a business trip for 3 people.",
                            DueDate = new DateTime(2025, 5, 25, 15, 41, 50, 895, DateTimeKind.Utc).AddTicks(5076),
                            Priority = 1,
                            Status = 2,
                            Title = "Company car needed"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("6330ce51-dc59-4d13-9bc8-a10e7e435cd6")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("3c818c4e-4ad8-4703-af4d-4c8677cf5874")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("527e8d2d-45af-4888-b323-8a13c65682aa")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "SupportAgent",
                            ClaimValue = "true",
                            UserId = new Guid("05abc7b7-e554-485f-a419-19ce2945e0e3")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("05abc7b7-e554-485f-a419-19ce2945e0e3"),
                            RoleId = new Guid("22b3a385-dd4e-4d86-836e-2909f1add421")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Comment", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.Category", "Category")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ITS.DAL.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ITS.DAL.Data.Models.Ticket", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
